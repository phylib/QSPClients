// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChunkChanges.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChunkChanges.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace quadtreesync {

namespace {

const ::google::protobuf::Descriptor* ChunkChanges_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkChanges_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chunk_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChunkChanges_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ChunkChanges_2eproto() {
  protobuf_AddDesc_ChunkChanges_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChunkChanges.proto");
  GOOGLE_CHECK(file != NULL);
  ChunkChanges_descriptor_ = file->message_type(0);
  static const int ChunkChanges_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkChanges, hashknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkChanges, chunks_),
  };
  ChunkChanges_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChunkChanges_descriptor_,
      ChunkChanges::default_instance_,
      ChunkChanges_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkChanges, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChunkChanges),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkChanges, _internal_metadata_),
      -1);
  Chunk_descriptor_ = file->message_type(1);
  static const int Chunk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, data_),
  };
  Chunk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Chunk_descriptor_,
      Chunk::default_instance_,
      Chunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _has_bits_[0]),
      -1,
      -1,
      sizeof(Chunk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChunkChanges_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChunkChanges_descriptor_, &ChunkChanges::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Chunk_descriptor_, &Chunk::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChunkChanges_2eproto() {
  delete ChunkChanges::default_instance_;
  delete ChunkChanges_reflection_;
  delete Chunk::default_instance_;
  delete Chunk_reflection_;
}

void protobuf_AddDesc_ChunkChanges_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ChunkChanges_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ChunkChanges.proto\022\014quadtreesync\"F\n\014Ch"
    "unkChanges\022\021\n\thashKnown\030\001 \002(\010\022#\n\006chunks\030"
    "\002 \003(\0132\023.quadtreesync.Chunk\"+\n\005Chunk\022\t\n\001x"
    "\030\001 \002(\004\022\t\n\001y\030\002 \002(\004\022\014\n\004data\030\003 \002(\004", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChunkChanges.proto", &protobuf_RegisterTypes);
  ChunkChanges::default_instance_ = new ChunkChanges();
  Chunk::default_instance_ = new Chunk();
  ChunkChanges::default_instance_->InitAsDefaultInstance();
  Chunk::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChunkChanges_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChunkChanges_2eproto {
  StaticDescriptorInitializer_ChunkChanges_2eproto() {
    protobuf_AddDesc_ChunkChanges_2eproto();
  }
} static_descriptor_initializer_ChunkChanges_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkChanges::kHashKnownFieldNumber;
const int ChunkChanges::kChunksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkChanges::ChunkChanges()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quadtreesync.ChunkChanges)
}

void ChunkChanges::InitAsDefaultInstance() {
}

ChunkChanges::ChunkChanges(const ChunkChanges& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:quadtreesync.ChunkChanges)
}

void ChunkChanges::SharedCtor() {
  _cached_size_ = 0;
  hashknown_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkChanges::~ChunkChanges() {
  // @@protoc_insertion_point(destructor:quadtreesync.ChunkChanges)
  SharedDtor();
}

void ChunkChanges::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChunkChanges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkChanges::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkChanges_descriptor_;
}

const ChunkChanges& ChunkChanges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChunkChanges_2eproto();
  return *default_instance_;
}

ChunkChanges* ChunkChanges::default_instance_ = NULL;

ChunkChanges* ChunkChanges::New(::google::protobuf::Arena* arena) const {
  ChunkChanges* n = new ChunkChanges;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChunkChanges::Clear() {
// @@protoc_insertion_point(message_clear_start:quadtreesync.ChunkChanges)
  hashknown_ = false;
  chunks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChunkChanges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quadtreesync.ChunkChanges)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool hashKnown = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hashknown_)));
          set_has_hashknown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chunks;
        break;
      }

      // repeated .quadtreesync.Chunk chunks = 2;
      case 2: {
        if (tag == 18) {
         parse_chunks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_chunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chunks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_chunks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quadtreesync.ChunkChanges)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quadtreesync.ChunkChanges)
  return false;
#undef DO_
}

void ChunkChanges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quadtreesync.ChunkChanges)
  // required bool hashKnown = 1;
  if (has_hashknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hashknown(), output);
  }

  // repeated .quadtreesync.Chunk chunks = 2;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chunks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quadtreesync.ChunkChanges)
}

::google::protobuf::uint8* ChunkChanges::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:quadtreesync.ChunkChanges)
  // required bool hashKnown = 1;
  if (has_hashknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hashknown(), target);
  }

  // repeated .quadtreesync.Chunk chunks = 2;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->chunks(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadtreesync.ChunkChanges)
  return target;
}

int ChunkChanges::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:quadtreesync.ChunkChanges)
  int total_size = 0;

  // required bool hashKnown = 1;
  if (has_hashknown()) {
    total_size += 1 + 1;
  }
  // repeated .quadtreesync.Chunk chunks = 2;
  total_size += 1 * this->chunks_size();
  for (int i = 0; i < this->chunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunks(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkChanges::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadtreesync.ChunkChanges)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChunkChanges* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkChanges>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadtreesync.ChunkChanges)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadtreesync.ChunkChanges)
    MergeFrom(*source);
  }
}

void ChunkChanges::MergeFrom(const ChunkChanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadtreesync.ChunkChanges)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  chunks_.MergeFrom(from.chunks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hashknown()) {
      set_hashknown(from.hashknown());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChunkChanges::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadtreesync.ChunkChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkChanges::CopyFrom(const ChunkChanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadtreesync.ChunkChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkChanges::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->chunks())) return false;
  return true;
}

void ChunkChanges::Swap(ChunkChanges* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkChanges::InternalSwap(ChunkChanges* other) {
  std::swap(hashknown_, other->hashknown_);
  chunks_.UnsafeArenaSwap(&other->chunks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChunkChanges::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkChanges_descriptor_;
  metadata.reflection = ChunkChanges_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChunkChanges

// required bool hashKnown = 1;
bool ChunkChanges::has_hashknown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChunkChanges::set_has_hashknown() {
  _has_bits_[0] |= 0x00000001u;
}
void ChunkChanges::clear_has_hashknown() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChunkChanges::clear_hashknown() {
  hashknown_ = false;
  clear_has_hashknown();
}
 bool ChunkChanges::hashknown() const {
  // @@protoc_insertion_point(field_get:quadtreesync.ChunkChanges.hashKnown)
  return hashknown_;
}
 void ChunkChanges::set_hashknown(bool value) {
  set_has_hashknown();
  hashknown_ = value;
  // @@protoc_insertion_point(field_set:quadtreesync.ChunkChanges.hashKnown)
}

// repeated .quadtreesync.Chunk chunks = 2;
int ChunkChanges::chunks_size() const {
  return chunks_.size();
}
void ChunkChanges::clear_chunks() {
  chunks_.Clear();
}
const ::quadtreesync::Chunk& ChunkChanges::chunks(int index) const {
  // @@protoc_insertion_point(field_get:quadtreesync.ChunkChanges.chunks)
  return chunks_.Get(index);
}
::quadtreesync::Chunk* ChunkChanges::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:quadtreesync.ChunkChanges.chunks)
  return chunks_.Mutable(index);
}
::quadtreesync::Chunk* ChunkChanges::add_chunks() {
  // @@protoc_insertion_point(field_add:quadtreesync.ChunkChanges.chunks)
  return chunks_.Add();
}
::google::protobuf::RepeatedPtrField< ::quadtreesync::Chunk >*
ChunkChanges::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:quadtreesync.ChunkChanges.chunks)
  return &chunks_;
}
const ::google::protobuf::RepeatedPtrField< ::quadtreesync::Chunk >&
ChunkChanges::chunks() const {
  // @@protoc_insertion_point(field_list:quadtreesync.ChunkChanges.chunks)
  return chunks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chunk::kXFieldNumber;
const int Chunk::kYFieldNumber;
const int Chunk::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chunk::Chunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quadtreesync.Chunk)
}

void Chunk::InitAsDefaultInstance() {
}

Chunk::Chunk(const Chunk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:quadtreesync.Chunk)
}

void Chunk::SharedCtor() {
  _cached_size_ = 0;
  x_ = GOOGLE_ULONGLONG(0);
  y_ = GOOGLE_ULONGLONG(0);
  data_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:quadtreesync.Chunk)
  SharedDtor();
}

void Chunk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chunk_descriptor_;
}

const Chunk& Chunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChunkChanges_2eproto();
  return *default_instance_;
}

Chunk* Chunk::default_instance_ = NULL;

Chunk* Chunk::New(::google::protobuf::Arena* arena) const {
  Chunk* n = new Chunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:quadtreesync.Chunk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Chunk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Chunk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, data_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quadtreesync.Chunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint64 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // required uint64 data = 3;
      case 3: {
        if (tag == 24) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quadtreesync.Chunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quadtreesync.Chunk)
  return false;
#undef DO_
}

void Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quadtreesync.Chunk)
  // required uint64 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->x(), output);
  }

  // required uint64 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->y(), output);
  }

  // required uint64 data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quadtreesync.Chunk)
}

::google::protobuf::uint8* Chunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:quadtreesync.Chunk)
  // required uint64 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->x(), target);
  }

  // required uint64 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->y(), target);
  }

  // required uint64 data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadtreesync.Chunk)
  return target;
}

int Chunk::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quadtreesync.Chunk)
  int total_size = 0;

  if (has_x()) {
    // required uint64 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->x());
  }

  if (has_y()) {
    // required uint64 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->y());
  }

  if (has_data()) {
    // required uint64 data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data());
  }

  return total_size;
}
int Chunk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:quadtreesync.Chunk)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->x());

    // required uint64 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->y());

    // required uint64 data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadtreesync.Chunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Chunk* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Chunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadtreesync.Chunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadtreesync.Chunk)
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadtreesync.Chunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Chunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadtreesync.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadtreesync.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Chunk::Swap(Chunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chunk::InternalSwap(Chunk* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chunk_descriptor_;
  metadata.reflection = Chunk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chunk

// required uint64 x = 1;
bool Chunk::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Chunk::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Chunk::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Chunk::clear_x() {
  x_ = GOOGLE_ULONGLONG(0);
  clear_has_x();
}
 ::google::protobuf::uint64 Chunk::x() const {
  // @@protoc_insertion_point(field_get:quadtreesync.Chunk.x)
  return x_;
}
 void Chunk::set_x(::google::protobuf::uint64 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:quadtreesync.Chunk.x)
}

// required uint64 y = 2;
bool Chunk::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Chunk::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Chunk::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Chunk::clear_y() {
  y_ = GOOGLE_ULONGLONG(0);
  clear_has_y();
}
 ::google::protobuf::uint64 Chunk::y() const {
  // @@protoc_insertion_point(field_get:quadtreesync.Chunk.y)
  return y_;
}
 void Chunk::set_y(::google::protobuf::uint64 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:quadtreesync.Chunk.y)
}

// required uint64 data = 3;
bool Chunk::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Chunk::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void Chunk::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void Chunk::clear_data() {
  data_ = GOOGLE_ULONGLONG(0);
  clear_has_data();
}
 ::google::protobuf::uint64 Chunk::data() const {
  // @@protoc_insertion_point(field_get:quadtreesync.Chunk.data)
  return data_;
}
 void Chunk::set_data(::google::protobuf::uint64 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:quadtreesync.Chunk.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace quadtreesync

// @@protoc_insertion_point(global_scope)
