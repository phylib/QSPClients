// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChunkChanges.proto

#ifndef PROTOBUF_ChunkChanges_2eproto__INCLUDED
#define PROTOBUF_ChunkChanges_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace quadtreesync {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ChunkChanges_2eproto();
void protobuf_AssignDesc_ChunkChanges_2eproto();
void protobuf_ShutdownFile_ChunkChanges_2eproto();

class Chunk;
class ChunkChanges;

// ===================================================================

class ChunkChanges : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quadtreesync.ChunkChanges) */ {
 public:
  ChunkChanges();
  virtual ~ChunkChanges();

  ChunkChanges(const ChunkChanges& from);

  inline ChunkChanges& operator=(const ChunkChanges& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkChanges& default_instance();

  void Swap(ChunkChanges* other);

  // implements Message ----------------------------------------------

  inline ChunkChanges* New() const { return New(NULL); }

  ChunkChanges* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChunkChanges& from);
  void MergeFrom(const ChunkChanges& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChunkChanges* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool hashKnown = 1;
  bool has_hashknown() const;
  void clear_hashknown();
  static const int kHashKnownFieldNumber = 1;
  bool hashknown() const;
  void set_hashknown(bool value);

  // repeated .quadtreesync.Chunk chunks = 2;
  int chunks_size() const;
  void clear_chunks();
  static const int kChunksFieldNumber = 2;
  const ::quadtreesync::Chunk& chunks(int index) const;
  ::quadtreesync::Chunk* mutable_chunks(int index);
  ::quadtreesync::Chunk* add_chunks();
  ::google::protobuf::RepeatedPtrField< ::quadtreesync::Chunk >*
      mutable_chunks();
  const ::google::protobuf::RepeatedPtrField< ::quadtreesync::Chunk >&
      chunks() const;

  // @@protoc_insertion_point(class_scope:quadtreesync.ChunkChanges)
 private:
  inline void set_has_hashknown();
  inline void clear_has_hashknown();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::quadtreesync::Chunk > chunks_;
  bool hashknown_;
  friend void  protobuf_AddDesc_ChunkChanges_2eproto();
  friend void protobuf_AssignDesc_ChunkChanges_2eproto();
  friend void protobuf_ShutdownFile_ChunkChanges_2eproto();

  void InitAsDefaultInstance();
  static ChunkChanges* default_instance_;
};
// -------------------------------------------------------------------

class Chunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quadtreesync.Chunk) */ {
 public:
  Chunk();
  virtual ~Chunk();

  Chunk(const Chunk& from);

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chunk& default_instance();

  void Swap(Chunk* other);

  // implements Message ----------------------------------------------

  inline Chunk* New() const { return New(NULL); }

  Chunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Chunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint64 x() const;
  void set_x(::google::protobuf::uint64 value);

  // required uint64 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint64 y() const;
  void set_y(::google::protobuf::uint64 value);

  // required uint64 data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  ::google::protobuf::uint64 data() const;
  void set_data(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quadtreesync.Chunk)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_data();
  inline void clear_has_data();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 x_;
  ::google::protobuf::uint64 y_;
  ::google::protobuf::uint64 data_;
  friend void  protobuf_AddDesc_ChunkChanges_2eproto();
  friend void protobuf_AssignDesc_ChunkChanges_2eproto();
  friend void protobuf_ShutdownFile_ChunkChanges_2eproto();

  void InitAsDefaultInstance();
  static Chunk* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChunkChanges

// required bool hashKnown = 1;
inline bool ChunkChanges::has_hashknown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkChanges::set_has_hashknown() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkChanges::clear_has_hashknown() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkChanges::clear_hashknown() {
  hashknown_ = false;
  clear_has_hashknown();
}
inline bool ChunkChanges::hashknown() const {
  // @@protoc_insertion_point(field_get:quadtreesync.ChunkChanges.hashKnown)
  return hashknown_;
}
inline void ChunkChanges::set_hashknown(bool value) {
  set_has_hashknown();
  hashknown_ = value;
  // @@protoc_insertion_point(field_set:quadtreesync.ChunkChanges.hashKnown)
}

// repeated .quadtreesync.Chunk chunks = 2;
inline int ChunkChanges::chunks_size() const {
  return chunks_.size();
}
inline void ChunkChanges::clear_chunks() {
  chunks_.Clear();
}
inline const ::quadtreesync::Chunk& ChunkChanges::chunks(int index) const {
  // @@protoc_insertion_point(field_get:quadtreesync.ChunkChanges.chunks)
  return chunks_.Get(index);
}
inline ::quadtreesync::Chunk* ChunkChanges::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:quadtreesync.ChunkChanges.chunks)
  return chunks_.Mutable(index);
}
inline ::quadtreesync::Chunk* ChunkChanges::add_chunks() {
  // @@protoc_insertion_point(field_add:quadtreesync.ChunkChanges.chunks)
  return chunks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::quadtreesync::Chunk >*
ChunkChanges::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:quadtreesync.ChunkChanges.chunks)
  return &chunks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::quadtreesync::Chunk >&
ChunkChanges::chunks() const {
  // @@protoc_insertion_point(field_list:quadtreesync.ChunkChanges.chunks)
  return chunks_;
}

// -------------------------------------------------------------------

// Chunk

// required uint64 x = 1;
inline bool Chunk::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chunk::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chunk::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chunk::clear_x() {
  x_ = GOOGLE_ULONGLONG(0);
  clear_has_x();
}
inline ::google::protobuf::uint64 Chunk::x() const {
  // @@protoc_insertion_point(field_get:quadtreesync.Chunk.x)
  return x_;
}
inline void Chunk::set_x(::google::protobuf::uint64 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:quadtreesync.Chunk.x)
}

// required uint64 y = 2;
inline bool Chunk::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chunk::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chunk::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chunk::clear_y() {
  y_ = GOOGLE_ULONGLONG(0);
  clear_has_y();
}
inline ::google::protobuf::uint64 Chunk::y() const {
  // @@protoc_insertion_point(field_get:quadtreesync.Chunk.y)
  return y_;
}
inline void Chunk::set_y(::google::protobuf::uint64 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:quadtreesync.Chunk.y)
}

// required uint64 data = 3;
inline bool Chunk::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chunk::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chunk::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chunk::clear_data() {
  data_ = GOOGLE_ULONGLONG(0);
  clear_has_data();
}
inline ::google::protobuf::uint64 Chunk::data() const {
  // @@protoc_insertion_point(field_get:quadtreesync.Chunk.data)
  return data_;
}
inline void Chunk::set_data(::google::protobuf::uint64 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:quadtreesync.Chunk.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quadtreesync

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChunkChanges_2eproto__INCLUDED
